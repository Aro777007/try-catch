#include <iostream>
#include <string>
using namespace std;
#include <exception>

class MyException : public exception {
public:
    const char* what() const noexcept {
        return "exception!";
    }
};

template <typename T>
class vector
{
    T* arr = nullptr;
    int size = 0;
    int capacity = 0;

public:
    vector() {}

    vector(int size)
    {
        this->size = size;
        arr = new T[size];
    }

    vector(const vector& obj)
    {
        this->arr = obj.arr;
        this->size = obj.size;
        arr = new T[size];
        this->capacity = obj.capacity;
    }

    vector& operator=(const vector& obj)
    {
        if (this != &obj)
        {
            delete[] arr;
            this->size = obj.size;
            this->capacity = obj.capacity;
            this->arr = obj.arr;
            arr = new T[size];
        }
        return *this;
    }

    vector(vector&& obj) noexcept
    {
        size = obj.size;
        arr = obj.arr;
        capacity = obj.capacity;
        obj.size = 0;
        obj.arr = nullptr;
        obj.capacity = 0;
    }

    vector& operator=(vector&& obj) noexcept
    {
        if (this != &obj)
        {
            delete[] arr;
            size = obj.size;
            arr = obj.arr;
            capacity = obj.capacity;
            obj.size = 0;
            obj.arr = nullptr;
            obj.capacity = 0;
        }
        return *this;
    }

    void get_element()
    {
        for (int i = 0; i < size; ++i)
        {
            arr[i] = 1;
            cout << arr[i];
        }
        cout << endl;
    }

    void push_back(const T& value) noexcept
    {
        if (size == capacity)
        {
            int newCapacity;
            if (capacity == 0)
            {
                newCapacity = 1;
            }
            else
            {
                newCapacity = capacity * 2;
            }
            T* newarr = new T[newCapacity];

            for (int i = 0; i < size; ++i)
            {
                newarr[i] = arr[i];
            }

            delete[] arr;
            arr = newarr;
            capacity = newCapacity;
        }

        arr[size] = value;
        ++size;

        for (int i = 0; i < size; ++i)
        {
            cout << arr[i];
        }
        cout << endl;
    }

    void pop_back()
    {
        if (size > 0)
        {
            --size;
        }

        for (int i = 0; i < size; ++i)
        {
            cout << arr[i];
        }
        cout << endl;
    }

    void insert(int index, const T& value)
    {
        if (index < 0 || index > size)
        {
            cout << "error" << endl;
            return;
        }

        if (size == capacity)
        {
            int newCapacity;
            if (capacity == 0)
            {
                newCapacity = 1;
            }
            else
            {
                newCapacity = capacity * 2;
            }
            T* newarr = new T[newCapacity];

            for (int i = 0; i < size; ++i)
            {
                newarr[i] = arr[i];
            }

            delete[] arr;
            arr = newarr;
            capacity = newCapacity;
        }


        for (int i = size; i > index; --i)
        {
            arr[i] = arr[i - 1];
        }

        arr[index] = value;
        ++size;


        for (int i = 0; i < size; ++i)
        {
            cout << arr[i];
        }
        cout << endl;
    }

    void erase(int index)
    {
        if (index < 0 || index >= size)
        {
            cout << "error" << endl;
            return;
        }

        for (int i = index; i < size - 1; ++i)
        {
            arr[i] = arr[i + 1];
        }
        --size;

        for (int i = 0; i < size; ++i)
        {
            cout << arr[i];
        }
        cout << endl;

    }

    void at()
    {
        int a;
        cin >> a;

        if (a >= 0 && a < 6)
        {
            cout << arr[a];
        }
        else
            throw 6;
    }





    ~vector()
    {
        delete[] arr;
    }



};




int main() {
    try {
        vector<int> a(6);
        vector<int> obj1 = a;
        a.get_element();

        a.push_back(2);
        a.pop_back();
        a.insert(2, 3);
        a.erase(1);

        try {
            a.at();
        }
        catch (const MyException& h) {
            cout << "Custom exception" << h.what() << std::endl;
        }

        vector<int> obj = std::move(a);
        vector<int> b;
        b = std::move(vector<int>(2));

    }
    catch (const exception& q) {
        cout << "Standard exception: " << q.what() << std::endl;
    }

    return 0;
}

